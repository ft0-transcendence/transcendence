// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // provider = "sqlite"
    url      = env("DATABASE_URL")
}

model User {
    id                 String                  @id @default(cuid())
    email              String                  @unique
    username           String
    imageUrl           String?
    imageBlob          Bytes?
    imageBlobMimeType  String?
    createdAt          DateTime                @default(now())
    friendOf           Friend[]                @relation("friendOf")
    friends            Friend[]                @relation("friends")
    gamesAsLeftPlayer  Game[]                  @relation("gamesAsLeftPlayer")
    gamesAsRightPlayer Game[]                  @relation("gamesAsRightPlayer")
    joinedTournaments  TournamentParticipant[] @relation("joinedTournaments")
    createdTournaments Tournament[]            @relation("createdTournaments")
    preferredLanguage  String                  @default("en")
}

enum FriendState {
    PENDING
    ACCEPTED
    REJECTED
}

model Friend {
    id        String      @id @default(cuid())
    createdAt DateTime    @default(now())
    state     FriendState
    userId    String
    user      User        @relation("friends", fields: [userId], references: [id])
    friendId  String
    friend    User        @relation("friendOf", fields: [friendId], references: [id])
}

enum TournamentType {
    EIGHT
}

model Tournament {
    id           String                  @id @default(cuid())
    type         TournamentType?         @default(EIGHT)
    name         String
    password     String?
    startDate    DateTime
    endDate      DateTime?
    createdById  String
    createdBy    User                    @relation("createdTournaments", fields: [createdById], references: [id])
    participants TournamentParticipant[] @relation("participants")
    games        Game[]                  @relation("games")
}

model TournamentParticipant {
    id           String     @id @default(cuid())
    tournamentId String
    userId       String
    tournament   Tournament @relation("participants", fields: [tournamentId], references: [id])
    user         User       @relation("joinedTournaments", fields: [userId], references: [id])
}

enum GameType {
    VS
    TOURNAMENT
}

model Game {
    id               String      @id @default(cuid())
    type             GameType
    startDate        DateTime
    updatedAt        DateTime    @default(now()) @updatedAt
    endDate          DateTime?
    abortDate        DateTime?
    abortReason      String?
    scoreGoal        Int         @default(7)
    leftPlayerScore  Int         @default(0)
    leftPlayerId     String
    leftPlayer       User        @relation("gamesAsLeftPlayer", fields: [leftPlayerId], references: [id])
    rightPlayerScore Int         @default(0)
    rightPlayerId    String
    rightPlayer      User        @relation("gamesAsRightPlayer", fields: [rightPlayerId], references: [id])
    nextGameId       String?
    nextGame         Game?       @relation("previousGames", fields: [nextGameId], references: [id])
    tournamentId     String?
    tournament       Tournament? @relation("games", fields: [tournamentId], references: [id])
    previousGames    Game[]      @relation("previousGames")
}
